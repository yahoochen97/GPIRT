mu = 0
sigma = 2
data = rnorm(n, mean = mu, sd = sigma)
null_mu = 0
print(2*(1-pnorm(mean(data),mean=null_mu,sd=sigma/sqrt(n))))
pnorm(mean(data),mean=null_mu,sd=sigma/sqrt(n))
mean(data)
set.seed(12345)
n = 40
mu = 0
sigma = 2
data = rnorm(n, mean = mu, sd = sigma)
null_mu = 0
print(1-pnorm(mean(data),mean=null_mu,sd=sigma/sqrt(n)))
set.seed(12345)
N = 400
n = 40
mu = 0
sigma = 2
null_mu = 0
ps = rep(0, N)
for (i in 1:N){
data = rnorm(n, mean = mu, sd = sigma)
ps[i] = 1-pnorm(mean(data),mean=null_mu,sd=sigma/sqrt(n))
}
plot(hist(ps))
set.seed(12345)
N = 400
n = 40
mu = 0
sigma = 2
null_mu = 0
ps = rep(0, N)
for (i in 1:N){
data = rnorm(n, mean = mu, sd = sigma)
ps[i] = 1-pnorm(mean(data),mean=null_mu,sd=sigma/sqrt(n))
}
plot(density(ps))
set.seed(1)
N = 400
n = 40
mu = 0
sigma = 2
null_mu = 0
ps = rep(0, N)
for (i in 1:N){
data = rnorm(n, mean = mu, sd = sigma)
ps[i] = 1-pnorm(mean(data),mean=null_mu,sd=sigma/sqrt(n))
}
plot(density(ps))
set.seed(1)
N = 400
n = 40
mu = 1
sigma = 2
null_mu = 0
ps = rep(0, N)
for (i in 1:N){
data = rnorm(n, mean = mu, sd = sigma)
ps[i] = 1-pnorm(mean(data),mean=null_mu,sd=sigma/sqrt(n))
}
plot(density(ps))
set.seed(1)
N = 400
n = 40
mu = 1
sigma = 2
null_mu = 0
ps = rep(0, N)
for (i in 1:N){
data = rnorm(n, mean = mu, sd = sigma)
ps[i] = 1-pnorm(mean(data),mean=null_mu,sd=sigma/sqrt(n))
}
plot(density(ps))
print(sum(ps<=0.05)/N)
num_mus=20
mus = seq(from = 0, to = 2, length.out = num_mus)
powers = rep(0, num_mus)
for(k in 1:num_mus){
set.seed(1)
N = 400
n = 40
mu = mus[k]
sigma = 2
null_mu = 0
ps = rep(0, N)
for (i in 1:N){
data = rnorm(n, mean = mu, sd = sigma)
ps[i] = 1-pnorm(mean(data),mean=null_mu,sd=sigma/sqrt(n))
}
powers[k] = sum(ps<=0.05)/N
}
plot(1:num_mus, powers)
M=20
Ns = seq(from = 100, to = 2000, length.out = M)
Ns
M=20
mu = 0.5
Ns = seq(from = 100, to = 2000, length.out = M)
powers = rep(0, M)
for(k in 1:M){
set.seed(1)
N = Ns[k]
n = 4
sigma = 2
null_mu = 0
ps = rep(0, N)
for (i in 1:N){
data = rnorm(n, mean = mu, sd = sigma)
ps[i] = 1-pnorm(mean(data),mean=null_mu,sd=sigma/sqrt(n))
}
powers[k] = sum(ps<=0.05)/N
}
plot(1:M, powers)
M = 20
mu = 1
Ns = seq(from = 100, to = 2000, length.out = M)
powers = rep(0, M)
for(k in 1:M){
set.seed(1)
N = Ns[k]
n = 4
sigma = 2
null_mu = 0
ps = rep(0, N)
for (i in 1:N){
data = rnorm(n, mean = mu, sd = sigma)
ps[i] = 1-pnorm(mean(data),mean=null_mu,sd=sigma/sqrt(n))
}
powers[k] = sum(ps<=0.05)/N
}
plot(1:M, powers)
M = 20
mu = 1
ns = seq(from = 10, to = 200, length.out = M)
powers = rep(0, M)
for(k in 1:M){
set.seed(1)
N = 400
n = ns[k]
sigma = 2
null_mu = 0
ps = rep(0, N)
for (i in 1:N){
data = rnorm(n, mean = mu, sd = sigma)
ps[i] = 1-pnorm(mean(data),mean=null_mu,sd=sigma/sqrt(n))
}
powers[k] = sum(ps<=0.05)/N
}
plot(1:M, powers)
M = 20
mu = 1
sigmas = seq(from = 0.1, to = 2, length.out = M)
powers = rep(0, M)
for(k in 1:M){
set.seed(1)
N = 400
n = 40
sigma = sigmas[k]
null_mu = 0
ps = rep(0, N)
for (i in 1:N){
data = rnorm(n, mean = mu, sd = sigma)
ps[i] = 1-pnorm(mean(data),mean=null_mu,sd=sigma/sqrt(n))
}
powers[k] = sum(ps<=0.05)/N
}
plot(1:M, powers)
M = 20
mu = 1
sigmas = seq(from = 1, to = 20, length.out = M)
powers = rep(0, M)
for(k in 1:M){
set.seed(1)
N = 400
n = 40
sigma = sigmas[k]
null_mu = 0
ps = rep(0, N)
for (i in 1:N){
data = rnorm(n, mean = mu, sd = sigma)
ps[i] = 1-pnorm(mean(data),mean=null_mu,sd=sigma/sqrt(n))
}
powers[k] = sum(ps<=0.05)/N
}
plot(1:M, powers)
M = 20
mu = 1
sigmas = seq(from = 1, to = 10, length.out = M)
powers = rep(0, M)
for(k in 1:M){
set.seed(1)
N = 400
n = 40
sigma = sigmas[k]
null_mu = 0
ps = rep(0, N)
for (i in 1:N){
data = rnorm(n, mean = mu, sd = sigma)
ps[i] = 1-pnorm(mean(data),mean=null_mu,sd=sigma/sqrt(n))
}
powers[k] = sum(ps<=0.05)/N
}
plot(1:M, powers)
library(estimatr)
?lm_robust
?gsynth
library(gsynth)
?gsynth
library(bpCausal)
?bpCausal
library(gsynth)
?gsynth
library(bpCausal)
?bpCausal
knitr::opts_chunk$set(echo = TRUE)
# plot the samples
plot(rep(1,num_samples),samples)
# draw the samples
mu = 0
sd_dev = 1
num_samples = 100
samples = rnorm(n = num_samples, mean = mu, sd = sd_dev)
# plot the samples
plot(rep(1,num_samples),samples)
library(MASS)
# draw the samples
mu = c(0,0)
covariance = matrix(c(1,0,0,1), nrow=2)
num_samples = 1000
samples = mvrnorm(n = num_samples, mu = mu, Sigma = covariance)
# draw the samples
mu = c(0,0)
covariance = matrix(c(1,0.9,0.9,1), nrow=2)
num_samples = 1000
samples = mvrnorm(n = num_samples, mu = mu, Sigma = covariance)
library(KRLS)
dimension = 10
mu = rep(0,dimension)
covariance = gausskernel(1:dimension, sigma=10)
num_samples = 5
samples = mvrnorm(n = num_samples, mu = mu, Sigma = covariance)
plot(1:dimension, samples[1,], 'l', ylim=c(-2,2))
for (i in 2:num_samples) {
lines(1:dimension, samples[i,])
}
library(KRLS)
dimension = 100
mu = rep(0,dimension)
covariance = gausskernel(1:dimension, sigma=50)
num_samples = 2
samples = mvrnorm(n = num_samples, mu = mu, Sigma = covariance)
plot(1:dimension, samples[1,], 'l', ylim=c(-2,2))
for (i in 2:num_samples) {
lines(1:dimension, samples[i,])
}
library(KRLS)
dimension = 100
mu = rep(0,dimension)
covariance = gausskernel(1:dimension, sigma=50)
num_samples = 2
samples = mvrnorm(n = num_samples, mu = mu, Sigma = covariance)
plot(1:dimension, samples[1,], 'l', ylim=c(-2,2))
for (i in 2:num_samples) {
lines(1:dimension, samples[i,])
}
knitr::opts_chunk$set(echo = TRUE)
library(lme4)
library(fastDummies)
# Step 1) Set up your data -- take care of your missing values
newData <- fastDummies::dummy_cols(ctsib)
library(faraway)
data(ctsib, package="faraway")
nrow(ctsib) # Number of observations
table(ctsib$CTSIB) # Our dependent variable
length(table(ctsib$Subject)) # Number of unique "subjects" in the experiment.
library(estimatr)
fit1 = lm_robust(CTSIB ~ Surface + Vision, fixed_effects = ~Subject, clusters = Subject, data = ctsib)
summary(fit1)
fit2 = lm(CTSIB ~ Surface + Vision + factor(Subject), data = ctsib)
summary(fit2)
library(lme4)
library(fastDummies)
# Step 1) Set up your data -- take care of your missing values
newData <- fastDummies::dummy_cols(ctsib)
X<-newData[,c( "Surface_foam", "Vision_dome", "Vision_open", "Sex_male", "Age", "Height", "Weight")]
Subject<-newData$Subject
## Step 2) Write your model
## Step 3) Set up data so it works with the model
simple_data<-list(
N=nrow(X),
J=40,
K=ncol(X),
y=newData$CTSIB,
X=X,
Subject=Subject
)
library(rstan)
## Step 4) Run the model
stanFit1<-stan(
file="MLM_model.stan",
data=simple_data,
chains=3,
warmup=2000,
iter=4000,
cores=1
)
summary(stanFit1)
summary(stanFit1)$summary
knitr::opts_chunk$set(echo = TRUE)
data <- iris
knitr::opts_chunk$set(echo = TRUE)
summary(iris)
summary(iris)
iris.mis <- prodNA(iris, noNA = 0.1)
library(missForest)
iris.mis <- prodNA(iris, noNA = 0.1)
summary(iris.mis)
library(missForest)
iris.mis <- prodNA(iris, noNA = 0.1)
iris.mis <- subset(iris.mis, select = -c(Species))
summary(iris.mis)
install.packages("mice")
library(mice)
library(mice)
imputed_Data <- mice(iris.mis, m=5, maxit = 50, method = 'pmm', seed = 500)
summary(imputed_Data)
library(mice)
imputed_Data <- mice(iris.mis, m=5, maxit = 50, method = 'pmm', seed = 500)
summary(imputed_Data)
imputed_Data$imp$Sepal.Width
library(mice)
imputed_Data <- mice(iris.mis, m=5, maxit = 50, method = 'pmm', seed = 500)
imputed_Data$imp$Sepal.Width
completeData <- complete(imputed_Data,2)
fit <- with(data = iris.mis, exp = lm(Sepal.Width ~ Sepal.Length + Petal.Width))
combine <- pool(fit)
completeData <- complete(imputed_Data,2)
fit <- lm(Sepal.Width ~ Sepal.Length + Petal.Width, data=completeData)
summary(fit)
fit <- lm(Sepal.Width ~ Sepal.Length + Petal.Width, data=iris)
summary(fit)
knitr::opts_chunk$set(echo = TRUE)
library(faraway)
data(ctsib, package="faraway")
nrow(ctsib) # Number of observations
table(ctsib$CTSIB) # Our dependent variable
length(table(ctsib$Subject)) # Number of unique "subjects" in the experiment.
head(ctsib)
library(glmnet)
lasso = cv.glmnet(ctsib[,-c("CTSIB")],ctsib$CTSIB,alpha=1)
head(ctsib)
library(glmnet)
lasso = cv.glmnet(ctsib[,-c(1,8)],ctsib$CTSIB,alpha=1)
?cv.glmnet
library(glmnet)
x = ctsib[,-c(1,8)]
y = ctsib$CTSIB
lasso = cv.glmnet(x,y,alpha=1)
library(glmnet)
x = data.frame(ctsib[,-c(1,8)])
y = ctsib$CTSIB
lasso = cv.glmnet(x,y,alpha=1)
library(glmnet)
y = ctsib$CTSIB
lasso = cv.glmnet(newData,y,alpha=1)
library(lme4)
library(fastDummies)
# Step 1) Set up your data -- take care of your missing values
newData <- fastDummies::dummy_cols(ctsib)
X<-newData[,c( "Surface_foam", "Vision_dome", "Vision_open", "Sex_male", "Age", "Height", "Weight")]
Subject<-newData$Subject
## Step 2) Write your model
## Step 3) Set up data so it works with the model
simple_data<-list(
N=nrow(X),
J=40,
K=ncol(X),
y=newData$CTSIB,
X=X,
Subject=Subject
)
library(rstan)
## Step 4) Run the model
stanFit1<-stan(
file="MLM_model.stan",
data=simple_data,
chains=3,
warmup=2000,
iter=4000,
cores=1
)
library(glmnet)
y = ctsib$CTSIB
lasso = cv.glmnet(newData,y,alpha=1)
library(glmnet)
y = ctsib$CTSIB
lasso = cv.glmnet(as.numeric(newData),y,alpha=1)
library(glmnet)
y = as.numeric(ctsib$CTSIB)
lasso = cv.glmnet(as.numeric(newData),y,alpha=1)
class(y)
class(newData)
library(glmnet)
x = newData[,-c(8)]
y = ctsib$CTSIB
lasso = cv.glmnet(x,y,alpha=1)
library(glmnet)
x = as.matrix(newData[,-c(8)])
y = ctsib$CTSIB
lasso = cv.glmnet(x,y,alpha=1)
library(glmnet)
x = as.numeric(as.matrix(newData[,-c(8)]))
y = ctsib$CTSIB
lasso = cv.glmnet(x,y,alpha=1)
size(x)
x
library(glmnet)
x = as.numeric(data.matrix(newData[,-c(8)]))
y = ctsib$CTSIB
lasso = cv.glmnet(x,y,alpha=1)
newData[,-c(8)]
library(glmnet)
x = as.numeric(data.matrix(newData[,-c(1,8)]))
y = ctsib$CTSIB
lasso = cv.glmnet(x,y,alpha=1)
library(glmnet)
x = as.numeric(data.matrix(newData[,-c(1,8)]))
y = data.matrix(ctsib$CTSIB)
lasso = cv.glmnet(x,y,alpha=1)
library(glmnet)
x = as.numeric(data.matrix(newData[,-c(1,2,6,7,8)]))
y = data.matrix(ctsib$CTSIB)
lasso = cv.glmnet(x,y,alpha=1)
library(glmnet)
x = data.matrix(newData[,-c(1,2,6,7,8)])
y = data.matrix(ctsib$CTSIB)
lasso = cv.glmnet(x,y,alpha=1)
summary(lasso)
mean(ctsib$Height)
mean(ctsib$Weight)
library(KRLS)
fit = krls(x, y)
head(x)
predict.krls(fit, c(40, 180, 75, 0, 1, 0, 1, 0, 0, 1))
xstar = c(40, 180, 75, 0, 1, 0, 1, 0, 0, 1)
predict.krls(fit, )
xstar
xstar = c(40, 180, 75, 0, 1, 0, 1, 0, 0, 1)
predict.krls(fit, xstar)
xstar = c(40, 180, 75, 0, 1, 0, 1, 0, 0, 1)
predict.krls(fit, xstar)
xstar = transpose(c(40, 180, 75, 0, 1, 0, 1, 0, 0, 1))
xstar = matrix(c(40, 180, 75, 0, 1, 0, 1, 0, 0, 1))
predict.krls(fit, xstar)
xstar = matrix(c(40, 180, 75, 0, 1, 0, 1, 0, 0, 1), ncol=1)
predict.krls(fit, xstar)
xstar = matrix(c(40, 180, 75, 0, 1, 0, 1, 0, 0, 1), nrow=1)
predict.krls(fit, xstar)
xstar = matrix(c(40, 180, 75, 0, 1, 0, 1, 0, 0, 1), nrow=1)
ystar = predict.krls(fit, xstar)
xstar = matrix(c(40, 180, 75, 0, 1, 0, 1, 1, 0, 0), nrow=1)
ystar = predict.krls(fit, xstar)
ystar$fit
xstar = matrix(c(40, 180, 75, 0, 1, 1, 0, 1, 0, 0), nrow=1)
ystar = predict.krls(fit, xstar)
ystar$fit
library(lme4)
library(fastDummies)
# Step 1) Set up your data -- take care of your missing values
newData <- fastDummies::dummy_cols(ctsib)
X<-newData[,c( "Surface_foam", "Vision_dome", "Vision_open", "Sex_male", "Age", "Height", "Weight")]
Subject<-newData$Subject
## Step 2) Write your model
## Step 3) Set up data so it works with the model
simple_data<-list(
N=nrow(X),
J=40,
K=ncol(X),
y=newData$CTSIB,
X=X,
Subject=Subject
)
library(rstan)
## Step 4) Run the model
stanFit1<-stan(
file="MLM_model.stan",
data=simple_data,
chains=2,
warmup=500,
iter=1000,
cores=1
)
knitr::opts_chunk$set(echo = TRUE)
library(haven)
data = read_dta("hierarchypaperdata.dta")
data = data[data$year==2012, c("polempowerment", "polity","cleanelec", "lpop","neighborpolempowerment")]
cleaned_data <- na.omit(data)
cleaned_data = cleaned_data[cleaned_data$polity<=100, ]
cleaned_data = cleaned_data[cleaned_data$polity>=0, ]
?mice
library(MICE)
library(mice)
?mice
library(mice)
imputed_Data <- mice(data, m=5, maxit = 50, method = 'pmm', seed = 500, printFlag = FALSE)
install.packages("gpirt", llib = "/Users/yahoo/Documents/GitHub/gpirtr")
source('~/Documents/GitHub/OrdGPIRT/gpirt-sdo.R', echo=TRUE)
plot(samples$theta[1,], samples$f[,1,1])
remove.packages("gpirt")
source('~/Documents/GitHub/OrdGPIRT/gpirt-sdo.R', echo=TRUE)
plot(samples$theta[1,], samples$f[,1,1])
